using System;
using System.Threading;
using System.IO;
using System.Media;

using NAudio.Utils;
using NAudio.Wave.SampleProviders;
using NAudio.Wave;

namespace NAudioTest
{
    class Program
    {
        public static void Play(IWaveProvider wp)
        {
            var wo = new WaveOut();
            // wo.DesiredLatency = 10;
            wo.NumberOfBuffers = 50;
            wo.Init(wp);
            wo.DesiredLatency = 0;
            wo.Play();
            while (wo.PlaybackState == PlaybackState.Playing)
            {
                Console.WriteLine("playing!");
                Thread.Sleep(500);
            }
            wo.Dispose();
        }

        static void Main(string[] args)
        {
            int sampleRate = 44100;

            double dt = 1.0 / sampleRate;
            double t = 0;
            double pi = 3.14159265358;
            double frequency = 500;
            const double amplitude = 0.1;
            Random rand = new Random();
            
            byte[] newSamples = new byte[500];

            // IWaveProvider WaveProvider = new TestProvider(new WaveFormat(sampleRate, 16, 1), sampleRate);
            BufferedWaveProvider bf = new BufferedWaveProvider(new WaveFormat(sampleRate, 16, 1));
            Thread thr = new Thread(() => Play(bf));
            thr.Start();

            while (true)
            {
                for (int i = 0; i < newSamples.Length; i += 2)
                {
                    frequency = 500 + 100 * (int)t;

                    double sampleValue = (t * frequency - (int)(t * frequency)) < 0.5 ? amplitude / 2 : -amplitude / 2;
                    // double sampleValue = amplitude * Math.Sin(2 * pi * frequency * t);
                    // double sampleValue = amplitude * (2 * rand.NextDouble() - 1);
                    // double sampleValue = amplitude * (1 - 2 *(t * frequency - (int)(t*frequency)));

                    short sample = (short)(sampleValue * Int16.MaxValue);
                    byte[] bytes = BitConverter.GetBytes(sample);

                    newSamples[i] = bytes[0];
                    newSamples[i + 1] = bytes[1];

                    t += dt;
                    // Console.WriteLine("Dit is een test");
                }
                // Console.WriteLine(bf.BufferedBytes);
                lock (bf)
                {
                    bf.AddSamples(newSamples, 0, newSamples.Length);
                }

                while (bf.BufferedBytes > 1.5 * newSamples.Length)
                {
                }
            }

            // SoundPlayer sp = new SoundPlayer(new TestStream(sampleRate));
            // sp.Play();

        }
    }
}
